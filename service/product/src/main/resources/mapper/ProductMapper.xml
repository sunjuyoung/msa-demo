<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sun.board.product.mapper.ProductMapper">

    <!-- ResultMap 정의 -->
    <resultMap id="ProductListResultMap" type="sun.board.product.dto.response.ProductDetailResponse">
        <id property="productId" column="product_id"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>
        <result property="price" column="price"/>
        <result property="category" column="category"/>
        <collection property="options" ofType="sun.board.product.dto.response.ProductOptionResponse">
            <result property="color" column="color"/>
            <result property="sizes" column="sizes" typeHandler="sun.board.product.service.handler.IntegerListTypeHandler"/>
        </collection>
    </resultMap>

    <!-- 공통 WHERE 조건 -->
    <sql id="searchConditions">
        <where>
            <!-- 재고 있는 상품만 조회하는 경우 -->
            <if test="inStock != null and inStock == true">
                AND EXISTS (
                SELECT 1 FROM product_option po
                WHERE po.product_id = p.id
                AND po.status = 'AVAILABLE'
                AND po.stock > 0
                )
            </if>

            <!-- 상품명 검색 -->
            <if test="name != null and name != ''">
                AND p.name LIKE CONCAT('%', #{name}, '%')
            </if>

            <!-- 카테고리 필터 -->
            <if test="category != null">
                AND p.category = #{category}
            </if>

            <!-- 가격 범위 -->
            <if test="minPrice != null">
                AND p.price >= #{minPrice}
            </if>
            <if test="maxPrice != null">
                AND p.price &lt;= #{maxPrice}
            </if>

            <!-- 색상 필터 -->
            <if test="colors != null and colors.size() > 0">
                AND EXISTS (
                SELECT 1 FROM product_option po
                WHERE po.product_id = p.id
                AND po.color IN
                <foreach collection="colors" item="color" open="(" separator="," close=")">
                    #{color}
                </foreach>
                AND po.status = 'AVAILABLE'
                )
            </if>

            <!-- 사이즈 필터 -->
            <if test="sizes != null and sizes.size() > 0">
                AND EXISTS (
                SELECT 1 FROM product_option po
                WHERE po.product_id = p.id
                AND po.size IN
                <foreach collection="sizes" item="size" open="(" separator="," close=")">
                    #{size}
                </foreach>
                AND po.status = 'AVAILABLE'
                )
            </if>
        </where>
    </sql>

    <!-- 정렬 조건 -->
    <sql id="orderByCondition">
        <choose>
            <when test="sortBy == 'price'">
                ORDER BY p.price
            </when>
            <when test="sortBy == 'name'">
                ORDER BY p.name
            </when>
            <otherwise>
                ORDER BY p.created_at
            </otherwise>
        </choose>

        <choose>
            <when test="sortDirection == 'ASC'">
                ASC
            </when>
            <otherwise>
                DESC
            </otherwise>
        </choose>
    </sql>

    <!-- 상품 리스트 조회 (옵션 그룹핑 포함) -->
    <select id="findProductsWithOptions" resultMap="ProductListResultMap">
        SELECT
        p.id as product_id,
        p.name,
        p.description,
        p.price,
        p.category,
        grouped_options.color,
        grouped_options.sizes
        FROM product p
        LEFT JOIN (
        SELECT
        po.product_id,
        po.color,
        GROUP_CONCAT(po.size ORDER BY po.size ASC) as sizes
        FROM product_option po
        WHERE po.status = 'AVAILABLE'
        <if test="inStock != null and inStock == true">
            AND po.stock > 0
        </if>
        GROUP BY po.product_id, po.color
        ) grouped_options ON p.id = grouped_options.product_id

        <include refid="searchConditions"/>

        <include refid="orderByCondition"/>

        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 상품 개수 조회 -->
    <select id="countProducts" resultType="int">
        SELECT COUNT(DISTINCT p.id)
        FROM product p

        <include refid="searchConditions"/>
    </select>

</mapper>